// <auto-generated />
using System;
using EmojitServer.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EmojitServer.Infrastructure.Migrations
{
    [DbContext(typeof(EmojitDbContext))]
    [Migration("20251029143658_SyncAfterChanges")]
    partial class SyncAfterChanges
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EmojitServer.Domain.Entities.GameSession", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CompletedAtUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("LastUpdatedAtUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("int");

                    b.Property<int>("MaxRounds")
                        .HasColumnType("int");

                    b.Property<string>("Mode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("StartedAtUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("_participants")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Participants");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAtUtc")
                        .HasDatabaseName("IX_GameSessions_CreatedAtUtc");

                    b.ToTable("GameSessions", (string)null);
                });

            modelBuilder.Entity("EmojitServer.Domain.Entities.LeaderboardEntry", b =>
                {
                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("GamesPlayed")
                        .HasColumnType("int");

                    b.Property<int>("GamesWon")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastUpdatedAtUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TotalPoints")
                        .HasColumnType("int");

                    b.HasKey("PlayerId");

                    b.HasIndex("TotalPoints")
                        .HasDatabaseName("IX_LeaderboardEntries_TotalPoints");

                    b.ToTable("LeaderboardEntries", (string)null);
                });

            modelBuilder.Entity("EmojitServer.Domain.Entities.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<int>("GamesPlayed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("GamesWon")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTimeOffset>("LastActiveAtUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("DisplayName")
                        .HasDatabaseName("IX_Players_DisplayName");

                    b.ToTable("Players", (string)null);
                });

            modelBuilder.Entity("EmojitServer.Domain.Entities.RoundLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("LoggedAtUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("MatchingSymbolId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("ResolutionTime")
                        .HasColumnType("time");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<int>("TowerCardIndex")
                        .HasColumnType("int");

                    b.Property<int?>("WinningPlayerCardIndex")
                        .HasColumnType("int");

                    b.Property<Guid?>("WinningPlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GameId", "RoundNumber")
                        .IsUnique()
                        .HasDatabaseName("UX_RoundLogs_GameId_RoundNumber");

                    b.ToTable("RoundLogs", (string)null);
                });

            modelBuilder.Entity("EmojitServer.Domain.Entities.RoundLog", b =>
                {
                    b.HasOne("EmojitServer.Domain.Entities.GameSession", null)
                        .WithMany("RoundLogs")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmojitServer.Domain.Entities.GameSession", b =>
                {
                    b.Navigation("RoundLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
